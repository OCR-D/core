# This is a template configuration file which allows customizing
# format and destination of log messages with OCR-D.
# It is meant as an example, and should be customized.
# To get into effect, you must put a copy (under the same name)
# into your CWD, HOME or /etc. These directories are searched
# in said order, and the first find wins. When no config file
# is found, the default logging configuration applies (cf. ocrd.logging.py).
# 
# mandatory loggers section
# configure loggers with corresponding keys "root", ""
# each logger requires a corresponding configuration section below
#
[loggers]
keys=root,ocrd,ocrd_network,ocrd_tensorflow,ocrd_shapely_geos,ocrd_PIL,uvicorn,uvicorn_access,uvicorn_error,multipart

#
# mandatory handlers section
# handle output for each logging "channel"
# i.e. console, file, smtp, syslog, http, ...
# each handler requires a corresponding configuration section below
#
[handlers]
keys=consoleHandler,fileHandler,processingServerHandler

#
# optional custom formatters section
# format message fields, to be used differently by logging handlers
# each formatter requires a corresponding formatter section below
#
[formatters]
keys=defaultFormatter,detailedFormatter

#
# default logger "root" using consoleHandler
#
[logger_root]
level=DEBUG
handlers=consoleHandler,fileHandler


#
# additional logger configurations can be added
# as separate configuration sections like below
#
# example logger "ocrd_workspace" uses fileHandler and overrides
# default log level "INFO" with custom level "DEBUG" 
# "qualname" must match the logger label used in the corresponding 
# ocrd module
# see in the module-of-interest (moi)
#
#[logger_ocrd_workspace]
#level=DEBUG
#handlers=fileHandler
#qualname=ocrd.workspace

# ocrd loggers
[logger_ocrd]
level=DEBUG
handlers=consoleHandler,fileHandler
qualname=ocrd
propagate=0

[logger_ocrd_network]
level=DEBUG
handlers=consoleHandler,processingServerHandler
qualname=ocrd_network
propagate=0

#
# logger tensorflow
#
[logger_ocrd_tensorflow]
level=ERROR
handlers=consoleHandler
qualname=tensorflow

#
# logger shapely.geos
#
[logger_ocrd_shapely_geos]
level=ERROR
handlers=consoleHandler
qualname=shapely.geos


#
# logger PIL
#
[logger_ocrd_PIL]
level=INFO
handlers=consoleHandler
qualname=PIL

#
# uvicorn loggers
#
[logger_uvicorn]
level=INFO
handlers=consoleHandler
qualname=uvicorn
[logger_uvicorn_access]
level=DEBUG
handlers=consoleHandler
qualname=uvicorn.access
[logger_uvicorn_error]
level=DEBUG
handlers=consoleHandler
qualname=uvicorn.error
[logger_multipart]
level=INFO
handlers=consoleHandler
qualname=multipart



#
# handle stderr output
#
[handler_consoleHandler]
class=StreamHandler
formatter=defaultFormatter
args=(sys.stderr,)

#
# example logfile handler
# handle output with logfile
#
[handler_fileHandler]
class=FileHandler
formatter=defaultFormatter
args=('ocrd.log','a+')

[handler_processingServerHandler]
class=FileHandler
formatter=defaultFormatter
args=('/tmp/ocrd_processing_server.log','a+')

#
# default log format conforming to OCR-D (https://ocr-d.de/en/spec/cli#logging)
#
[formatter_defaultFormatter]
format=%(asctime)s.%(msecs)03d %(levelname)s %(name)s - %(message)s
datefmt=%H:%M:%S

#
# store more logging context information
#
[formatter_detailedFormatter]
format=%(asctime)s.%(msecs)03d %(levelname)-8s (%(name)s)[%(filename)s:%(lineno)d] - %(message)s
datefmt=%H:%M:%S
