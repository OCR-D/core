"""
API to PAGE-XML, generated with generateDS from XML schema.
"""
from io import StringIO
from ocrd_models.constants import NAMESPACES as NS
from time import perf_counter
from ocrd_utils import getLogger
import _ctypes

LOG = getLogger('ocrd_page')

__all__ = [
    'parse',
    'parseString',

    'AlternativeImageType',
    'CoordsType',
    'GlyphType',
    'ImageRegionType',
    'LabelType',
    'LabelsType',
    'MathsRegionType',
    'MetadataType',
    'MetadataItemType',
    'NoiseRegionType',
    'OrderedGroupType',
    'PageType',
    'PcGtsType',
    'ReadingOrderType',
    'RegionRefIndexedType',
    'SeparatorRegionType',
    'TextEquivType',
    'TextLineType',
    'TextStyleType',
    'TextRegionType',
    'WordType',

    'to_xml'
]

from .ocrd_page_generateds import (
    parse as generateds_parse,
    parseString as generateds_parseString,

    AlternativeImageType,
    CoordsType,
    GlyphType,
    ImageRegionType,
    LabelType,
    LabelsType,
    MathsRegionType,
    MetadataType,
    MetadataItemType,
    NoiseRegionType,
    OrderedGroupType,
    PageType,
    PcGtsType,
    ReadingOrderType,
    RegionRefIndexedType,
    SeparatorRegionType,
    TextEquivType,
    TextLineType,
    TextRegionType,
    TextStyleType,
    WordType,
)

from .constants import NAMESPACES

def di(ID):
    """
    Opposite of ``id()``. Very evil stuff. h/t martineau at
    https://stackoverflow.com/questions/15011674/is-it-possible-to-dereference-variable-ids
    """
    return _ctypes.PyObj_FromPtr(ID)


def to_xml(el):
    """
    Serialize ``pc:PcGts`` document
    """
    sio = StringIO()
    el.export(sio, 0, name_='PcGts',
            namespacedef_='xmlns:pc="%s"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="%s %s/pagecontent.xsd"' % (
                NAMESPACES['page'],
                NAMESPACES['page'],
                NAMESPACES['page']
            ))
    return '<?xml version="1.0" encoding="UTF-8"?>\n' + sio.getvalue()

class OcrdPageExt():
    """
    Helper class for translating between generateDS and etree API and
    implementing Region iterator.

    Nomenclature:
    - "obj" refers to a type class instance generated by generateDS
    - "el" is an etree element
    """

    @classmethod
    def monkey_patch(cls, pcgts):
        pcgts.ocrd_ext = cls(pcgts)
        return pcgts

    def __init__(self, root_obj):
        self.root_obj = root_obj
        self.mapping_obj2el = None
        self.mapping_el2obj = None
        self.root_el = None
        self.update_mappings()

    def update_mappings(self):
        """
        Needs to be called whenever the PAGE document changes and this class
        shall be used
        """
        t0 = perf_counter()
        self.mapping_obj2el = {}
        self.root_el = self.root_obj.to_etree(None, name_='PcGts', mapping_=self.mapping_obj2el)
        self.mapping_el2obj = dict(((v, k) for k, v in self.mapping_obj2el.items()))
        LOG.debug("OcrdPageExt.update_mappings took %ss", perf_counter()-t0)

    def get_parent_obj_for_obj(self, obj):
        return obj.parent_object_

    def get_parent_el_for_obj(self, obj):
        return self.get_el_for_obj(obj.parent_object_)

    def get_parent_obj_for_el(self, el):
        return self.get_obj_for_el(el.getparent())

    def get_el_for_obj(self, obj):
        return self.mapping_obj2el.get(id(obj), None)

    def get_obj_for_el(self, el):
        ID = self.mapping_el2obj.get(el, None)
        if ID:
            return di(ID)

    def get_el_by_id(self, ID):
        els = self.root_el.xpath('//*[@id="%s"]' % ID)
        if els:
            return els[0]

    def get_obj_by_id(self, ID):
        el = self.get_el_by_id(ID)
        if el is not None:
            return self.get_obj_for_el(el)

    def get_all_regions_el(self, regions=None):
        if not regions:
            regions = [
                'Text',
                'Image',
                'LineDrawing',
                'Graphic',
                'Table',
                'Chart',
                'Map',
                'Separator',
                'Maths',
                'Chem',
                'Music',
                'Advert',
                'Noise',
                'Unknown',
                'Custom'
            ]
        xpath = '|'.join(['//page:%sRegion' % t for t in regions])
        els = self.root_el.xpath(xpath, namespaces=NS)
        return els if els is not None else []

    def get_all_regions_obj(self, regions=None):
        return [self.get_obj_for_el(el) for el in self.get_all_regions_el(regions)]

def parse(*args, **kwargs):
    """
    Parse with generateDS and store mapping to lxml on the rootObj
    """
    return OcrdPageExt.monkey_patch(generateds_parse(*args, **kwargs))

def parseString(*args, **kwargs):
    """
    Parse with generateDS and store mapping to lxml on the rootObj
    """
    return OcrdPageExt.monkey_patch(generateds_parseString(*args, **kwargs))
